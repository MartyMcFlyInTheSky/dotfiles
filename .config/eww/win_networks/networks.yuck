;; ./win_networks/network.yuck

(defvar connected_to_bssid '')

(defvar jvar_selection '{}')

(defvar jvar_networks '[]')

(defvar var_loading_error false)
(defvar var_loading false)
(defpoll var_load_spinner
    :interval '100ms'
    :initial 'R'
    :run-while var_connecting

    `python common/spin.py`)


(defvar var_connecting false)
(defpoll var_conn_spinner
    :interval '50ms'
    :initial 'Connect'
    :run-while var_loading

    `python common/spin.py`)

(defwidget selector_button [name onclick ?active_when]
    (eventbox :cursor "pointer"
        :class 'selector-button'
        (button :onclick { onclick }
            :active { active_when?: true }
            name)))



(defwidget network_entry [name onclick selected conn_error in_use]
    (button :class { selected? 'netw-button-selected' : 'netw-button' }
            :onclick onclick
            (centerbox :orientation 'h'
                :space-evenly false
                :style 'padding: 0px 10px'
                (label :xalign '0.0' :text '${ name }')
                (label :xalign '0.5' :class 'wifi-high')
                (box
                    :space-evenly false
                    :halign 'end'
                    (label :visible { conn_error } :text '' :class 'icon' :style 'color: orange;')
                    (label :visible { in_use } :text '' :class 'icon')
                    (label :visible true :text '󰤟' :class 'icon')
                )
            )))


(defwidget widg_networks []
    (box :orientation "v"
        :class "netw-menu"
        :space-evenly false
        (box :orientation 'v'
            :visible { !var_loading_error }
            :vexpand true
            (label :text "Click a to show available networks"
                    :class "netw-label-emptybox"
                    :visible { jvar_networks == "[]" })
            (for network in jvar_networks
                (network_entry :onclick "${EWW_CMD} update jvar_selection='${ network }'"
                    :name '${ network["ssid"] } - ${ network["freq"] }'  
                    :selected { network["bssid"] == jvar_selection["bssid"] ? true : false }
                    :conn_error { network["connecting"] == "e" ? true : false }
                    :in_use { network["in-use"] == "*" ? true : false }
                    :is_connecting { network["connecting"] == "y" ? true : false}
                )))
        (label :text "Loading error"
            :visible { var_loading_error })
        (box :orientation 'h'
            :height 50
            (selector_button :active_when { !var_connecting }
                    :onclick "python win_networks/nw_connect.py '${ jvar_selection }' '${ jvar_networks }'"
                    :name { var_connecting ? var_conn_spinner : '' })
            (selector_button :active_when { !var_loading }
                    :onclick "python win_networks/update_nw_list.py"
                    :name { var_loading ? var_load_spinner : '󰑓' })
            (selector_button :active_when true
                    :onclick "${EWW_CMD} close win_networks && ${EWW_CMD} update var_wifi=false"
                    :name '')
        )
    )
)


(defwindow win_networks
  :monitor 0
  :windowtype "normal"
  :geometry (geometry :x "-5%"
                      :y "5%"
                      :width "300px"
                      :height "10%"
                      :anchor "top right")
  :stacking "fg"
  :wm-ignore true
  :reserve (struts :side "top" :distance "4%")
  (widg_networks))

